<?php
/**
 * Copyright 2013 hbz NRW (http://www.hbz-nrw.de/)
 *
 * This file is part of regal-drupal.
 *
 * regal-drupal is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * regal-drupal is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with regal-drupal.  If not, see <http://www.gnu.org/licenses/>.
 */

/**
 * @file
 * Implements the basic functionality required to create and display an entity.
 */

require_once dirname(__FILE__) . '/lib/LibRDF/LibRDF/LibRDF.php';
require_once dirname(__FILE__) . '/lib/php-json-ld/jsonld.php';
include_once dirname(__FILE__) . '/php/logging.php';
include_once dirname(__FILE__) . '/php/updateScripts.php';
include_once dirname(__FILE__) . '/php/facets.php';
include_once dirname(__FILE__) . '/php/breadcrumb.php';
include_once dirname(__FILE__) . '/php/tree.php';
include_once dirname(__FILE__) . '/php/configFunctions.php';
include_once dirname(__FILE__) . '/php/edowebEntityInfo.php';
include_once dirname(__FILE__) . '/php/searchResult.php';// edoweb/search
include_once dirname(__FILE__) . '/php/search.php';
include_once dirname(__FILE__) . '/php/browse.php';//browse/%
include_once dirname(__FILE__) . '/php/adminForm.php'; //resource/%edoweb_basic/admin
include_once dirname(__FILE__) . '/php/accessForm.php';//resource/%edoweb_basic/access
include_once dirname(__FILE__) . '/php/statusTab.php';//resource/%edoweb_basic/status'
include_once dirname(__FILE__) . '/php/crawlerForm.php'; //resource/%edoweb_basic/crawler
include_once dirname(__FILE__) . '/php/viewTab.php';    //resource/%edoweb_basic
include_once dirname(__FILE__) . '/php/editTab.php'; //resource/%edoweb_basic/structure, resource/%edoweb_basic/edit
include_once dirname(__FILE__) . '/php/moduleSettings.php'; //edoweb/config/settings
include_once dirname(__FILE__) . '/php/edowebMenu.php';

/*****
 * 
 * What is where?
 * 
 * Start with edowebMenu.php
 * There you will find all routes associated with their respective controller 
 * functions (callbacks).
 * 
 */
/**
 * Implements hook_init().
 */
function edoweb_init() {
  drupal_add_library('system', 'ui.sortable');
  if (drupal_match_path(current_path(), 'resource' . PHP_EOL . 'resource/*')
      || drupal_match_path(current_path(), 'browse' . PHP_EOL . 'browse/*')) {
    drupal_add_library('system', 'ui.dialog');
    drupal_add_library('system', 'ui.datepicker');
    drupal_add_library('system', 'drupal.collapse');
    global $user;
    $action_access = ((in_array('edoweb_backend_admin', $user->roles)
                      || in_array('edoweb_backend_user', $user->roles)));
    drupal_add_js(array('actionAccess' => $action_access), 'setting');

    $bundle_infos = field_info_instances(EDOWEB_ENTITY_TYPE);
    $instances = array();
    foreach ($bundle_infos as $bundle => $bundle_info) {
      foreach ($bundle_info as $field_name => $instance) {
        // Load field settings.
        $field = field_info_field($field_name);
        if (isset($field['cardinality'])) {
          $instance['settings']['cardinality'] = $field['cardinality'];
        }
        $instance['settings'] += $field['settings'];
        $instance['settings']['field_type'] = $field['type'];
        $instances[$bundle][$field_name] = array(
          'instance' => $instance,
        );
      }
    }
    $settings = array(
      'fields' => $instances,
      'namespaces' => rdf_get_namespaces(),
      'primary_bundles' => array(
        'monograph', 'journal', 'volume', 'issue', 'article','researchData','oer'
      ),
      'site_frontpage' => variable_get('site_frontpage', '/'),
      'deepzoomServiceUrl' => variable_get('edoweb_deepzoom_url') ,
      'thumbyServiceUrl' => variable_get('edoweb_thumby_url'),
      'zettelServiceUrl' => variable_get('edoweb_zettel_url'),	
    );
    drupal_add_js(array('edoweb' => $settings), 'setting');
    drupal_add_js(
      drupal_get_path('module', 'edoweb') . '/js/edoweb.js'
    );
    drupal_add_js(
        drupal_get_path('module', 'edoweb') . '/js/edoweb_view.js'
    );
    drupal_add_js(
        drupal_get_path('module', 'edoweb') . '/js/jquery.tablesorter.min.js'
    );
    drupal_add_js(
        drupal_get_path('module', 'edoweb') . '/js/jquery.blockUI.js'
    );
    drupal_add_js(drupal_get_path('module', 'edoweb') . '/js/jquery.rdfquery.rdfa.min-1.0.js');
    drupal_add_js(drupal_get_path('module', 'edoweb') . '/js/jquery.url.js');
    drupal_add_js(drupal_get_path('module', 'edoweb') . '/js/jquery-listnav.js');
    drupal_add_css(drupal_get_path('module', 'edoweb') . '/css/listnav.css');
    drupal_add_css(drupal_get_path('module', 'edoweb') . '/css/edoweb.css');
    drupal_add_css(drupal_get_path('module', 'edoweb') . '/css/font-awesome.min.css');
    // Setup IE meta tag to force IE rendering mode
    $meta_ie_render_engine = array(
        '#type' => 'html_tag',
        '#tag' => 'meta',
        '#attributes' => array(
            'http-equiv' => 'X-UA-Compatible',
            'content' =>  'IE=EmulateIE7,chrome=1',
        ),
        '#weight' => '-99999',
    );
    
    
    // Add header meta tag for IE to head
    //drupal_add_html_head($meta_ie_render_engine, 'meta_ie_render_engine');
  }
}


/**
 * Implements hook_entity_property_info().
 */
function edoweb_entity_property_info() {
  $property_info = array();
  $properties = &$property_info[EDOWEB_ENTITY_TYPE]['properties'];
  $properties['bundle_type'] = array(
    'label' => t('The bundle of the Entity'),
    'type' => 'text',
  );
  $properties['created'] = array(
    'label' => t('The creation date of the Entity'),
    'type' => 'date',
  );
  $properties['updated'] = array(
    'label' => t('The update date of the Entity'),
    'type' => 'text',
  );
  $properties['objectTimestamp'] = array(
    'label' => t('The last manual update date of the Entity'),
    'type' => 'text',
  );
  $properties['uid'] = array(
    'label' => t('The user ID of the creator of the Entity'),
    'type' => 'integer',
  );
  $properties['mid'] = array(
    'label' => t('The user ID of the last modificator of the Entity'),
    'type' => 'integer',
  );
  $properties['remote_id'] = array(
    'label' => t('The ID of the Entity, a URI'),
    'type' => 'uri',
  );
  $properties['access_md'] = array(
    'label' => t('The metadata access scheme of the Entity'),
    'type' => 'text',
  );
  $properties['access_data'] = array(
    'label' => t('The data access scheme of the Entity'),
    'type' => 'text',
  );
  $properties['name'] = array(
    'label' => t('A name for the metadata record'),
    'type' => 'text',
  );
  $properties['submitter'] = array(
      'label' => t('The person submitting the oer'),
      'type' => 'text',
  );
  $properties['submitter_email'] = array(
      'label' => t('An email address of the submitter '),
      'type' => 'text',
  );
  return $property_info;
}

/**
 * Fetch a basic object.
 *
 * This function ends up being a shim between the menu system and
 * edoweb_basic_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: resource/%edoweb_basic in
 * hook_menu() tells Drupal to call edoweb_basic_load().
 *
 * @param $remote_id
 *   Integer specifying the basic entity uri.
 * @param $reset
 *   A boolean indicating that the internal cache should be reset.
 * @return
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see edoweb_basic_load_multiple()
 * @see edoweb_menu()
 */
function edoweb_basic_load($remote_id, $reset = FALSE) {
  $remote_ids = $remote_id ? array($remote_id) : array();
  $basic = edoweb_basic_load_multiple($remote_ids, array(), $reset);
  return $basic ? reset($basic) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function edoweb_basic_load_multiple($remote_ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('edoweb_basic', $remote_ids, $conditions, $reset);
}


/**
 * Basic information for the page.
 */
function edoweb_info_page() {
  drupal_set_title('');
  $query = new EntityFieldQuery();
  $query->addTag('elasticsearch');
  $query->entityCondition('entity_type', 'edoweb_basic');
  $query->entityCondition('bundle', array(
    'monograph', 'journal', 'volume', 'issue', 'article', 'file', 'webpage', 'version', 'part','researchData','oer'
  ));
  $content['resource_list'] = edoweb_basic_search_entities(
    $query, TRUE, array(), TRUE, user_access('edit any edoweb_basic entity'), TRUE, 'compact', TRUE
  );

  return $content;
}

/**
 * Implements hook_permission().
 */
function edoweb_permission() {
  $permissions = array(
    'administer edoweb_basic entities' =>  array(
      'title' => t('Administer Edoweb Basic entities'),
    ),
    'view any edoweb_basic entity' => array(
      'title' => t('View any Edoweb Basic entity'),
    ),
    'edit any edoweb_basic entity' => array(
      'title' => t('Edit any Edoweb Basic entity'),
    ),
    'create edoweb_basic entities' => array(
      'title' => t('Create Edoweb Basic Entities'),
    ),
    'administer edoweb configuration' => array(
      'title' => t('Administer Edoweb Configuration'),
    ),
    'administer edoweb repository' => array(
      'title' => t('Administer Edoweb Repository'),
    ),
  );
  return $permissions;
}


/**
 * Callback to display bundle name.
 */
function edoweb_basic_bundle_name($bundle) {
  $info = entity_get_info('edoweb_basic');
  $label = !empty($info['bundles'][$bundle]['label'])
    ? $info['bundles'][$bundle]['label']
    : 'Resource';
  return $label;
}

function edoweb_entity_view_alter(&$build, $type) {
  if (user_is_anonymous()) {
    unset($build['field_gnd_date_of_birth']);
    unset($build['field_gnd_date_of_death']);
  }
}


/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 */
function edoweb_field_extra_fields() {
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'description' => t('Creation date (an extra display field)'),
    'weight' => 0,
  );

  // Attach extra_fields to all bundles
  $extra_fields['edoweb_basic']['monograph']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['journal']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['volume']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['researchData']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['article']['display'] = $display_elements;
  $extra_fields['edoweb_basic']['oer']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function edoweb_basic_add($bundle_type, $parent = NULL) {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  $entity = entity_get_controller('edoweb_basic')->create(
    array(
      'bundle_type' => $bundle_type,
      'created' => time(),
      'updated' => time(),
    )
  );
  $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
  if (NULL !== $parent) {
    $wrapper->field_edoweb_struct_parent = $parent->remote_id;
  }
  return edoweb_basic_edit($entity);
}



function edoweb_basic_data($entity) {
  $api = new EdowebAPIClient();
  if ('POST' == $_SERVER['REQUEST_METHOD']) {
    // Handle uploaded files by moving them from the tmp directory
    // and storing the resulting (local) URI
    if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
        && isset($_FILES['files']['error'][0])
        && isset($_FILES['files']['error'][0])
    ) {
      $tmp_name = $_FILES['files']['tmp_name'][0];
      $file_name = $_FILES['files']['name'][0];
      $file_type = $_FILES['files']['type'][0];
      $file_size = $_FILES['files']['size'][0];
      $file_uri = file_unmanaged_move($tmp_name);
       # neu Kuss Debugging 01.12.2022 
      $file_handle = fopen('/tmp/hphp', 'a+');
      fwrite($file_handle, 'file_name='.$file_name."\n");
      fwrite($file_handle, 'tmp_name='.$tmp_name."\n");
      fwrite($file_handle, 'file_uri='.$file_uri."\n");
      fclose($file_handle);
       # Debugging 01.12.2022
      # OSU-172 Ingolf
      # old $entity->field_edoweb_datastream[LANGUAGE_NONE][]['value'] = $file_uri;
      $entity->field_edoweb_datastream[LANGUAGE_NONE][0]['value'] = $file_uri;
      $entity->field_edoweb_label[LANGUAGE_NONE][]['value'] = $file_name;
      #OSU-172 Hasan // encodingFormat
      # old $entity->field_edoweb_filetype[LANGUAGE_NONE][]['value'] = $file_type;
      $entity->field_edoweb_filetype[LANGUAGE_NONE][0]['value'] = $file_type;
      $entity->field_edoweb_filesize[LANGUAGE_NONE][]['value'] = $file_size;
      $api->saveFiles($entity);
    } else if (_edoweb_field_access($entity, array('field_edoweb_datastream'))
               && !isset($entity->field_edoweb_datastream[LANGUAGE_NONE][0]['value'])
    ) {
      form_set_error('field_edoweb_datastream', t('File is required.'));
    }
  } else {
    $http_response = $api->getFile($entity);
    if (2 != $http_response->code[0]) {
      return drupal_access_denied();
    }
    foreach ($http_response->headers as $header => $value) {
      header("{$header}:{$value}");
    }
    ob_clean();
    die($http_response->data);
  }
}


/**
 * We save the entity by calling the controller.
 */
function edoweb_basic_save(&$entity) {
  return entity_get_controller('edoweb_basic')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function edoweb_basic_delete($entity) {
  entity_get_controller('edoweb_basic')->delete($entity);
}

/**
 * Implements hook_rdf_mapping().
 *
 * This hook should only be used to define the RDF mapping for an entity or
 * bundle that has been defined by this module. On installation, this mapping
 * will be saved to the database. To alter anything in this mapping after module
 * installation (or to alter bundles defined in another module), the RDF CRUD
 * functions should be used.
 */
function edoweb_rdf_mapping() {

  module_load_install('edoweb');
  $bundles = _edoweb_installed_instances();

  $rdf_types = edoweb_rdf_types();
  $rdf_mappings = array();
  foreach ($bundles as $bundle_type => $field_instances) {
    $rdf_mapping = array(
      'type' => EDOWEB_ENTITY_TYPE,
      'bundle' => $bundle_type,
      'mapping' => array(
        'type' => $rdf_types[$bundle_type],
      ),
    );
    foreach ($field_instances as $field_name => $field_instance) {
      $field_info = field_info_field($field_name);
      if (isset($field_info['settings']['predicates'])) {
        $rdf_mapping['mapping'][$field_name]['predicates'] =
          $field_info['settings']['predicates'];
        if ($field_info['type'] == 'edoweb_ld_reference' || $field_info['type'] == 'list_text') {
          $rdf_mapping['mapping'][$field_name]['type'] = 'rel';
        }
      }
    }
    $rdf_mappings[] = $rdf_mapping;
  }

  return $rdf_mappings;

}


/**
 * Implements hook_block_info().
 *
 * This hook declares what blocks are provided by the module.
 *
 */
function edoweb_block_info() {
  $blocks = array();

  $blocks['edoweb_search_block'] = array(
    'info' => t('Edoweb search'),
    'status' => 1,
    'region' => 'header',
    'weight' => '100',
  );

  $blocks['edoweb_tree_navigation'] = array(
    'info' => t('Edoweb Tree Navigation'),
    'status' => 1,
    'region' => 'left',
    'weight' => '100',
  );

  $blocks['edoweb_entity_list'] = array(
    'info' => t('Edoweb Entity List'),
    'status' => 1,
    'region' => 'content',
    'weight' => '100',
  );


  return $blocks;
}

function edoweb_block_list_alter(&$blocks) {
  // Exclude all blocks when handling AJAX request
  if (!empty($_SERVER['HTTP_X_REQUESTED_WITH'])
      && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest')
  {
    foreach ($blocks as $id => $block) {
      if ('content' !== $block->region) {
        unset($blocks[$id]);
      }
    }
  }
}

/**
 * Implements hook_block_configure().
 *
 * This hook provides block configuration
 */
function edoweb_block_configure($delta ='') {
  $form = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'edoweb_entity_list':
      $tablename_value = 'Trefferliste';
      if(variable_get('tablename')){
        $tablename_value = variable_get('tablename');
      }
      $hide_facets_value = 1;
      if(variable_get('hide_facets')== 0){
        $hide_facets_value = 0;
      }
      $form['tablename'] = array(
        '#type' => 'textfield',
        '#title' => t('Bennenung der Tabelle'),
        '#default_value' => $tablename_value,
        '#description' => "Hier kann der Name der Tabelle geändert werden",
        //'#options' => drupal_map_assoc(array(2,3,4,5,6)),
      );
      $form['hide_facets'] = array(
        '#type' => 'checkbox',
        '#title' => t('Facetten verstecken'),
        '#default_value' => $hide_facets_value,
        '#description' => "Wenn aktiviert (default), werden die Filter innerhalb des Blocks ausgeblendet",
        //'#options' => drupal_map_assoc(array(2,3,4,5,6)),
      );
    break;
  }
  return $form;
}

/**
 * Implements hook_block_save().
 *
 * This hook saves a block configuration
 */
function edoweb_block_save($delta ='', $edit = array()) {
  $block = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'edoweb_entity_list':
      variable_set('tablename', $edit['tablename']);
      variable_set('hide_facets', $edit['hide_facets']);
      
    break;
  }
  return $form;
}


/**
 * Implements hook_block_view().
 *
 * This hook generates the contents of the blocks themselves.
 */
function edoweb_block_view($delta = '') {
  $block = array();
  // The $delta parameter tells us which block is being requested.
  switch ($delta) {
    case 'edoweb_search_block':
      drupal_add_css(
        '.block .form-text {max-width: 100%;}',
        array('type' => 'inline')
      );
      $block['subject'] = t('Search');
      $block['content'] = drupal_get_form(
        'edoweb_basic_search_entities_form', FALSE, 0, array()
      );
      $block['content']['#action'] = url('resource');
      unset($block['content']['form_build_id']);
      unset($block['content']['form_id']);
      unset($block['content']['form_token']);
      break;
    case 'edoweb_tree_navigation':
      if ($entity = menu_get_object(EDOWEB_ENTITY_TYPE)) {
        drupal_add_js(
            drupal_get_path('module', 'edoweb') . '/js/edoweb_edit.js'
        );
        drupal_add_js(
            drupal_get_path('module', 'edoweb') . '/js/zettel.js'
        );
        drupal_add_js(
            drupal_get_path('module', 'edoweb') . '/js/edoweb_tree.js'
        );
        $top_level_parent = _edoweb_find_top_level_parent($entity);
        if (_edoweb_is_editable_entity($top_level_parent) &&
            in_array($top_level_parent->bundle_type, array('monograph', 'journal','webpage','researchData','article','oer'))) {
          $api = new EdowebAPIClient();
          $subtree = _edoweb_build_tree($api->getTree($top_level_parent));
          $block['content'] = theme_item_list(array(
            'items' => array($subtree),
            'title' => null,
            'type' => 'ul',
            'attributes' => array('class' => array('edoweb-tree')),
          ));
        }
      }
      break;
    case 'edoweb_entity_list':

      $table_name = t('Liste der assoziierten Publikationen');
      if(variable_get('tablename')) {
        $table_name = variable_get('tablename');
        }

      //var_dump(variable_get('tablename'));
      $entity  = menu_get_object();
      $query = new EntityFieldQuery();
      $query->entityCondition('bundle', array(
      'monograph', 'journal', 'volume', 'issue', 'file', 'webpage', 'version', 'part','article', 'researchData','oer')); 
  //    $query->addMetaData('term', $entity->title);
      $active_facets = 'institution';
      $query->addTag('elasticsearch');

   //   $block['content'] = edoweb_basic_list_entities($query, array(), FALSE, NULL, TRUE, 'default'); 
      if(variable_get('hide_facets')== 1) {
        $block['content']['filters'] = null; 

        drupal_add_css(
          '.block fieldset.edoweb-entity-list {width: 100%;}',
          array('type' => 'inline')
        );

        }

      $block['content']['entity_list']['#title'] = $table_name; 
      // var_dump($block);
      break;
  }
  return $block;
}

/**
 * Implements hook_help().
 */
function edoweb_help($path, $arg) {
  //switch ($path) {
  //  case 'edoweb/resource':
  //    return "<p>" . t(
  //      'This Module implements Edoweb functionality'
  //    ) . "</p>";
  //}
}

/**
 * Implements hook_file_load().
 */
function edoweb_file_load($files) {
  //drupal_set_message(print_r($files, TRUE));
}

/**
 * Implements hook_file_insert().
 */
function edoweb_file_insert($files) {
  //drupal_set_message(print_r($files, TRUE));
}

/**
 * Set prefix of HTML title
 */
function edoweb_preprocess_html(&$vars) {
  $title_parts = explode('|', $vars['head_title']);
  $site_name = variable_get('site_name');
  if ($site_name == trim(array_pop($title_parts)) && $title_parts) {
    $vars['head_title'] = "{$site_name}: " . implode('|', $title_parts);
  }
}

function edoweb_preprocess_page(&$vars) {
  if ($entity = menu_get_object(EDOWEB_ENTITY_TYPE)) {
    $vars['title_suffix']['edoweb']['#markup'] = '<h2 class="title-suffix" id="page-title-suffix">' . $entity->subLabel() . '</h2>';
    $vars['pageTitle']=$entity->pageTitle();
  }
}

function _edoweb_format_date($timestamp) {
  return format_date($timestamp, 'custom', 'D, d.m.Y - H:i:s');
}

function _edoweb_format_subject($remote_id) {
  $curie = _edoweb_compact_uri($remote_id);
  return strtoupper(substr($curie, 0, strpos($curie, ':')));
}

function _edoweb_link_lastmodified($entity) {
  if (_is_edoweb_entity($entity)) {
    $curie = _edoweb_compact_uri($entity->remote_id);
    $href = "edoweb/lastmodified/$curie";
    return l("Zuletzt hinzugefügtes Label wird geladen ...",
      $href, array('attributes' => array('class' => array('edoweb lastmodified')))
    );
  }
}

function _edoweb_compact_view($entity) {
  $entity_view = edoweb_basic_view($entity, 'compact');
  return drupal_render($entity_view);
}

function _edoweb_http_request($request_url, $http_options) {

  // Add credentials if loading from API
  $api_host = variable_get('edoweb_api_host');
  $is_api_request = FALSE;
  if ("$api_host" === substr($request_url, 0, strlen($api_host))) {
    $is_api_request = TRUE;
    $http_options['headers']['Authorization'] = _get_api_auth_header();
    $http_options['headers']['UserIp'] = $_SERVER['REMOTE_ADDR'];
  }

  // Add UserId header for modifying methods
  $modifying = $is_api_request
      && in_array($http_options['method'], array('PUT', 'POST', 'DELETE', 'PATCH'));

  if ($modifying) {
    global $user;
    $http_options['headers']['UserId'] = $user->uid;
  }

  $http_options += array(
    'timeout' => 60,
  );

  // echo('request_url: '.$request_url);
  //   foreach ($http_options as $http_option) {
  //     echo('http_option: '.$http_option);
  //   }
  $http_response = drupal_http_request($request_url, $http_options);
  // echo('http_response->code: '.$http_response->code);
  // echo('http_response->data: '.$http_response->data);

  $request = explode(' ', $http_response->request);
  $is_search_request = $is_api_request && (substr(ltrim(next($request), '/'), 0, 6) == 'search');
  if ($modifying && !$is_search_request) {
    console_log($http_response);
  }

  // FIXME: drupal_http_request does not follow 303s
  if ((303 == $http_response->code) || (307 == $http_response->code)) {
    $redirect_url = $http_response->headers['location'];
    // Fix for relative redirect URLs
    if ("/" == substr($redirect_url, 0, 1)) {
      $parsed_url = parse_url($request_url);
      $redirect_url = "{$parsed_url['scheme']}://{$parsed_url['host']}$redirect_url";
    } else if ("http" != substr($redirect_url, 0, 4)) {
      $parsed_url = parse_url($request_url);
      $path = substr($parsed_url['path'], 0, strrpos($parsed_url['path'], '/'));
      $redirect_url = "{$parsed_url['scheme']}://{$parsed_url['host']}{$path}/$redirect_url";
    }
    $request_url = $redirect_url;
    $http_response = drupal_http_request($request_url, $http_options);
  }

  // Display response in UI
  if ($is_api_request) {
    drupal_add_http_header('Status', $http_response->code);
    if (($modifying && !$is_search_request)
        || ($http_options['method'] == 'GET' && $http_response->code >= 400)) {
      $status_type = 'error';
      switch ($http_response->code[0]) {
        case '2':
          $status_type = 'status';
          break;
        case '5':
          $status_type = 'warning';
          break;
      }
      if ('DELETE' == $http_options['method']) {
        $message = $http_response->data;
        $code = $http_response->code;
      } else {
        $data = json_decode($http_response->data);
        $message = $data->text;
        $code = $data->code;
      }
      drupal_set_message("$code: $message", $status_type);
    }
  }

  return $http_response;
}

function _edoweb_autocomplete($bundle_name, $field_name) {

  $term = $_GET['term'];
  $entities = _edoweb_lookup($bundle_name, $field_name, $term);
  $matches = array();
  foreach ($entities as $entity) {
    $matches[] = array(
      'value' => $entity->identifier(),
      'label' => entity_label(EDOWEB_ENTITY_TYPE, $entity),
    );
  }
  drupal_json_output($matches);
}


function _edoweb_field_has_value_type($entity, $field_name, $bundle_type) {
  $values = field_get_items('edoweb_basic', $entity, $field_name);
  if (FALSE === $values) return FALSE;
  $field_has_value_type = FALSE;
  foreach ($values as $value) {
    $ref_entity = edoweb_basic_load($value['value']);
    if ($ref_entity->bundle_type == $bundle_type) {
      $field_has_value_type = TRUE;
      break;
    }
  }
  return $field_has_value_type;
}

function _edoweb_field_access($entity, $fields = array(), $permissions = null) {
  // Check that the entity has at least one of the provided
  // fields and that the user has the proper permission.
  $field_instances_info = field_info_instances(
    'edoweb_basic', $entity->bundle_type
  );
  $entity_has_field = FALSE;
  foreach ($field_instances_info as $field_name => $instance_settings) {
    if (in_array($field_name, $fields)) {
      $entity_has_field = TRUE;
      break;
    }
  }
  if (isset($permissions)) {
    return $entity_has_field && user_access($permissions);
  } else {
    return $entity_has_field;
  }
}

function _edoweb_is_editable_entity($entity, $permissions = null) {
  if (isset($permissions)) {
    return _is_edoweb_entity($entity) && user_access($permissions);
  } else {
    return _is_edoweb_entity($entity);
  }
}

function _edoweb_is_webpage_entity($entity, $permissions = null) {
  return 'webpage' == $entity->bundle()
      && _edoweb_is_editable_entity($entity, $permissions);
}

function _full_title($label, $entity, $attributes = array()) {
  //var_dump($entity );
  return '<h1 class="title">' . _get_edoweb_url($entity->label(), $entity, $attributes) . '</h1>'
    . ($entity->subLabel() ? '<h2 class="title-suffix">' . $entity->subLabel() . '</h2>' : '');
}

function _compact_title($label, $entity, $attributes = array()) {
 	if('file' == $entity->bundle()){
 		$downloadImage =_edoweb_download_image($entity->getField(array('field_edoweb_filetype')));
		return '<div class="' .$entity->remote_id. ' fileInfo">'
				.'<h1 class="fileTitle" >' . _get_edoweb_url($entity->label(), $entity, $attributes) . '</h1>'
				.'<div class="fileMimetype">'. $entity->getField(array('field_edoweb_filetype')) .'</div>'
				.'<div class="fileSize">'. $entity->getField(array('field_edoweb_filesize')).'</div>'
				.'<a class="downloadUrl" target="blank" href="'.$entity->url().'/data"><img class="edoweb-mimetype" src="'.$downloadImage.'"/></a>'
				.'<div class="accessRights">'.$entity->access_data.'</div>'
				.'</div>';
	}	
	return '<h1 class="title">' . _get_edoweb_url($entity->label(), $entity, $attributes) . '</h1>';
}

function _get_edoweb_url($label, $entity, $attributes = array()) {
  if (is_object($entity)) {
    $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
   //var_dump($wrapper);
    $curie = $entity->remote_id;
  } else {
    $curie = $entity;
  }
  $uri = _edoweb_expand_curie($curie);
  $query = array();
  if (_is_edoweb_entity($curie)) {
    $href = 'resource/' . $curie;
  } else if ('lr:' == substr($curie, 0, 3)) {
    if ($wrapper) {
      $id = $wrapper->field_edoweb_identifier_ht->value();
    } else {
      $id = $label;
    }
    $attributes['target'] = '_blank';
    $href = "http://okeanos-www.hbz-nrw.de/F/?func=find-c&ccl_term=IDN%3D{$id}";
  } else {
    $href = "resource";
    $query = array("query[0][term]" => '"' . $uri . '"');
  }
  return l($label ? $label : $curie, $href,
    array(
      'attributes' => $attributes,
      'query' => $query,
      'html' => TRUE,
    )
  );
}

function _get_external_url($label, $entity, $attributes = array()) {
  if (is_object($entity)) {
    $wrapper = entity_metadata_wrapper('edoweb_basic', $entity);
    $curie = $entity->remote_id;
  } else {
    $curie = $entity;
  }
  $uri = _edoweb_expand_curie($curie);
  if (_is_edoweb_entity($curie)) {
    $href = 'resource/' . $curie;
  } else if ('lr:' == substr($curie, 0, 3)) {
    if ($wrapper) {
      $id = $wrapper->field_edoweb_identifier_ht->value();
    } else {
      $id = $label;
    }
    $href = "http://okeanos-www.hbz-nrw.de/F/?func=find-c&ccl_term=IDN%3D{$id}";
  } else {
    $href = $uri;
  }
  $attributes['target'] = '_blank';
  return l($label ? $label : $curie, $href,
    array(
      'attributes' => $attributes
    )
  );
}

function _get_link($label, $entity, $attributes = array()) {
	$wrapper = entity_metadata_wrapper ( 'edoweb_basic', $entity );
	$curie = $entity->remote_id;
	$value = $entity->field_edoweb_ht_with_link ['und'] [0] ['value'];
	$attributes ['target'] = '_blank';
	return l ( $label ? $label : $curie, $value, array (
			'attributes' => $attributes
	) );
}

function _edoweb_format_bundle_name($bundle) {
  return sprintf(
    '<span class="entity-label-%s">%s</span>',
    $bundle,
    edoweb_basic_bundle_name($bundle)
  );
}

function _edoweb_templates($bundle_name = null) {
    $api = new EdowebAPIClient();
    die($api->getTemplates($bundle_name));
}

function _edoweb_lastmodified($remote_id) {
    $api = new EdowebAPIClient();
    $old_msg = drupal_get_messages();
    $last_modified = $api->getLastModified($remote_id);
    $_SESSION['messages'] = $old_msg;
    return $last_modified;
}


/**
 * Get a user name
 */
function _edoweb_user_name($id) {
    $account = is_numeric($id) ? user_load($id) : false;
    if (!$account) {
        $name = $id;
    } else {
        $name = $account->name != '' ? $account->name : $account->uid;
    }
    return $name;
}


function _edoweb_find_top_level_parent($entity) {
    $parents = field_get_items('edoweb_basic', $entity, 'field_edoweb_struct_parent');
    if (FALSE !== $parents) {
        return _edoweb_find_top_level_parent(
            edoweb_basic_load($parents[0]['value'])
            );
    }
    return $entity;
}
